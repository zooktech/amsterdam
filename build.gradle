
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'findbugs'

group = 'com.unicodecollective'
version = '0.1.0'

sourceCompatibility = '1.6'

repositories {
	mavenCentral()
}

dependencies {
	compile 'log4j:log4j:1.2.16',
			'joda-time:joda-time:2.1',
			'com.google.guava:guava:11.0.2',
			'commons-lang:commons-lang:2.6'
	testCompile 'junit:junit:4.10',
			'org.mockito:mockito-all:1.9.0'
}

jar {
	dependsOn test
    from 'LICENSE'
}

// custom tasks for creating source jar
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
	from 'LICENSE'
}

// custom tasks for creating javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
	from 'LICENSE'
}

/*
artifacts {
	archives jar
	archives sourcesJar
	archives javadocJar
}

signing {
	sign configurations.archives
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment {
				MavenDeployment deployment -> signPom(deployment)
			}

			def sonatypeRepoUrl = version.endsWith('SNAPSHOT') ?
				"https://oss.sonatype.org/content/repositories/snapshots/"
				: "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			repository(url: sonatypeRepoUrl) {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}

			pom.project {
				name 'amsterdam'
				packaging 'jar'
				description 'A Java throughput management library.'
				url 'https://github.com/unicode-collective-london/amsterdam'

				scm {
					url 'scm:git@github.com:unicode-collective-london/amsterdam.git'
					connection 'scm:git@github.com:unicode-collective-london/amsterdam.git'
					developerConnection 'scm:git@github.com:unicode-collective-london/amsterdam.git'
				}

				licenses {
					license {
						name 'MIT License'
						url 'http://www.opensource.org/licenses/MIT'
						distribution 'repo'
					}
				}

				developers {
					developer {
						id 'martindow'
						name 'Martin Dow'
					}
					developer {
						id 'paddycakes'
						name 'Patrick Gallagher'
					}
				}
			}

			//mess with the generated pom to set the 'packaging' tag
			pom.withXml { XmlProvider xmlProvider ->
				def xml = xmlProvider.asString()
				def pomXml = new XmlParser().parse(new ByteArrayInputStream(xml.toString().bytes))

				pomXml.version[0] + { packaging('jar') }

				def newXml = new StringWriter()
				def printer = new XmlNodePrinter(new PrintWriter(newXml))
				printer.preserveWhitespace = true
				printer.print(pomXml)
				xml.setLength(0)
				xml.append(newXml.toString())
			}
		}
	}
}
*/